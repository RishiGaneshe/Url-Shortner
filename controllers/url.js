const URL = require('../models/url.js')
const shortid = require('shortid')
const jwt= require('jsonwebtoken')
const secret= "Abhishek@Ganeshe@2002";
const {redisClient}= require('../services/connection.js') 



exports.handleHomepage= async(req,res)=>{
  try{
      const id=req.user._id
      const urls = await URL.find({ createdBy: id }).sort({ createdAt: -1 }).limit(2)
  
      if(urls.length==0){
        urls[0]='',
        urls[1]=''
      }
      return res.status(200).render('shortUrl',{url:urls})
  }catch(err){
      console.log(err)
      return res.status(500).render('Error500')
  }
}


exports.handlegenerateURL= async(req,res)=>{
  try{
      const body=req.body;
      if(!body.url) return res.status(400).json({msg:"no url found"})
      const shortID= shortid();
      await URL.create({
        shortId: shortID,
        redirectURL:body.url,
        visitorHistory:[],
        createdBy: req.user._id
      })
      const id=req.user._id
      const urls = await URL.find({ createdBy: id }).sort({ createdAt: -1 }).limit(2)
      // console.log(`URL generated by ${req.user.username}`)
      return res.status(200).render('shortUrl',{url:urls})
  }catch(err){
      console.log(err)
      return res.status(500).render('Error500')
  }
}


exports.handleAllUrls= async (req,res)=>{
  try{
      const id=req.user._id
      const urls = await URL.find({ createdBy: id }).sort({ createdAt: -1 })
      res.status(200).render('allUrls',{urls:urls})
  }catch(err){
      console.log(err)
      return res.status(500).render('Error500')
  }
}


exports.handleLogout= async(req,res)=>{
  try{ 
      const token= req.cookies.session_id
       if(!token) {return res.status(401).render('Error401')}

      const decoded= jwt.verify(token,secret);
      const expirationTime = decoded.exp - Math.floor(Date.now() / 1000);
      
      await redisClient.set(token,'blacklisted','EX',expirationTime);
      res.clearCookie('session_id');
      console.log(`User ${decoded.username} Logged-Out`)
      return res.status(200).redirect("/")
 
  }catch(err){
      console.log(err)
      return res.status(500).render('Error500')
  }
}





// eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmIyODdkNzJhNWMzMDllMWIxNDY2ZWUiLCJ1c2VybmFtZSI6InJpc2hpIiwiaWF0IjoxNzIzNDEyNDQ1LCJleHAiOjE3MjM0MTMwNDV9.IzLTPJHLnghycBdb6SNBSG1GCIcrfxmh9v3ucajtFm4